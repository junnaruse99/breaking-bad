{"version":3,"sources":["components/Phrase.js","components/Spinner.js","App.js","reportWebVitals.js","index.js"],"names":["PhraseContainer","styled","div","Phrase","phrase","Object","keys","length","quote","author","Spinner","class","Container","Button","button","SpinnerContainer","App","useState","savePhrase","loading","updateLoading","consultAPI","a","fetch","api","json","useEffect","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wgCAGA,IAAMA,EAAkBC,IAAOC,IAAV,KA6CNC,EAXA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEd,OAAmC,IAA/BC,OAAOC,KAAKF,GAAQG,OAAqB,KAEzC,eAACP,EAAD,WACI,6BAAKI,EAAOI,QACZ,mCAAMJ,EAAOK,OAAb,YC9BGC,G,MAXC,kBACZ,sBAAKC,MAAM,WAAX,UACI,qBAAKA,MAAM,iBACX,qBAAKA,MAAM,iBACX,qBAAKA,MAAM,iBACX,qBAAKA,MAAM,iBACX,qBAAKA,MAAM,iBACX,qBAAKA,MAAM,sB,ksBCHnB,IAAMC,EAAYX,IAAOC,IAAV,KAOTW,EAASZ,IAAOa,OAAV,KAiBNC,EAAmBd,IAAOC,IAAV,KAqCPc,MAhCf,WAAe,MAGkBC,mBAAS,IAH3B,mBAGLb,EAHK,KAGGc,EAHH,OAMsBD,oBAAS,GAN/B,mBAMLE,EANK,KAMIC,EANJ,KASPC,EAAU,uCAAG,8BAAAC,EAAA,sEACCC,MAAM,uDADP,cACXC,EADW,gBAEIA,EAAIC,OAFR,OAEXrB,EAFW,OAGjBc,EAAWd,EAAO,IAClBgB,GAAc,GAJG,2CAAH,qDAYhB,OAJAM,qBAAW,WACTL,MACC,IAGD,eAACT,EAAD,WACGO,EAAU,cAACJ,EAAD,UAAkB,cAAC,EAAD,MAAiC,KAC9D,cAAC,EAAD,CAAQX,OAAQA,IAChB,cAACS,EAAD,CACEc,QAASN,EADX,4BChDSO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d7e0a262.chunk.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\n\nconst PhraseContainer = styled.div`\n    padding: 3rem;\n    border-radius: .5rem;\n    background-color: #fff;\n    max-width: 800px;\n    margin-top: 20rem;\n\n    h2 {\n        font-family: Arial, Helvetica, sans-serif; \n        text-align: center;\n        position: relative;\n        padding-left: 4rem;\n\n        &::before {\n            content: open-quote;\n            font-size: 10rem;\n            color: black;\n            position: absolute;\n            left: -1rem;\n            top: -2rem;\n        }\n    }\n\n    p {\n        font-family: Verdana, Geneva, Tahoma, sans-serif;\n        font-size: 1.4rem;\n        font-weight: bold;\n        text-align: right;\n        color: #666;\n        margin-top: 2rem;\n    }\n`;\n\n\nconst Phrase = ( {phrase} ) => {\n\n    if (Object.keys(phrase).length === 0) return null;\n    return (\n        <PhraseContainer>\n            <h2>{phrase.quote}</h2>\n            <p>- {phrase.author} -</p>\n        </PhraseContainer>\n     );\n}\n \nexport default Phrase;","import '../spinner.css'\n\nconst Spinner = () => (\n    <div class=\"sk-chase\">\n        <div class=\"sk-chase-dot\"></div>\n        <div class=\"sk-chase-dot\"></div>\n        <div class=\"sk-chase-dot\"></div>\n        <div class=\"sk-chase-dot\"></div>\n        <div class=\"sk-chase-dot\"></div>\n        <div class=\"sk-chase-dot\"></div>\n    </div>\n)\n \nexport default Spinner;","\nimport React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport Phrase from './components/Phrase';\nimport Spinner from './components/Spinner';\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  padding-top: 5rem;\n  flex-direction: column;\n`;\n\nconst Button = styled.button`\n  background: -webkit-linear-gradient(top left, #007d35 0%, #007d35 40%, #0f574e 100%);\n  background-size: 300px;\n  font-family: Arial, Helvetica, sans-serif;\n  color: #fff;\n  margin-top: 3rem;\n  padding: 1rem 3rem;\n  font-size: 2rem;\n  border: 2px solid black;\n  transition: background-size .3s ease;\n\n  :hover {\n    cursor:pointer;\n    background-size: 400px;\n  }\n`;\n\nconst SpinnerContainer = styled.div`\n  margin-top: 20rem;\n`\n\n\nfunction App() {\n\n  // State of phrase\n  const [ phrase, savePhrase ] = useState({});\n\n  // State for loading\n  const [ loading, updateLoading ] = useState(true);\n\n\n  const consultAPI = async () => {\n    const api = await fetch('https://breaking-bad-quotes.herokuapp.com/v1/quotes');\n    const phrase = await api.json();\n    savePhrase(phrase[0]);\n    updateLoading(false);\n  }\n\n  // Load a phrase when document ready\n  useEffect( () => {\n    consultAPI();\n  }, []);\n\n  return (\n    <Container>\n      {loading ? <SpinnerContainer><Spinner /></SpinnerContainer> : null}\n      <Phrase phrase={phrase} />\n      <Button\n        onClick={consultAPI}\n      >Get phrase</Button>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}